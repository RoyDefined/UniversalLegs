private enum : fixed
{
	DRAWPITCHTHRESHOLD = 0.15,
};

private bool _walking;
private int _legsTid;
private bool _visible;
private bool _customTid;

function bool GetWalking(void)
{
	return _walking;
}

function void SetWalking(bool walking)
{
	SetActorState(GetLegsTid(), walking ? "Walking" : "Spawn");
	_walking = walking;
}

function int GetLegsTid(void)
{
	return _legsTid;
}

function void SetLegsTid(int tid)
{
	_legsTid = tid;
}

function bool GetVisible(void)
{
	return _visible;
}

function void SetVisible(bool visible)
{
	SetActorProperty(GetLegsTid(), APROP_ALPHA, visible ? 1.0 : 0.0);
	_visible = visible;
}

script "LegsEnter" enter
{
	if (!IsZandronum()) {
		terminate;
	}
	
	// Intentional delay to avoid tid issues.
	Delay(const: 5);
	
	if (ActivatorTID() != 0) {
		terminate;
	}
	
	_customTid = UniqueTID();
	Thing_ChangeTID(0, _customTid);
	
	LogDebug("Tid has been assigned.");
}

script "LegsEnterClient" enter clientside
{
	if (!IsZandronum())
	{
		LogError("First person legs is a mod only compatible with Zandronum. Please change the source port you play on if you want to use this mod.");
		terminate;
	}
	
	if (PlayerIsBot(PlayerNumber())) {
		terminate;
	}
	
	// Intentional delay to avoid tid issues.
	Delay(const: 10);
	
	int legsTID = UniqueTid();
	SetLegsTid(legsTID);
	
	int sourceTid = ActivatorTID();
	
	SpawnForced("FirstPersonLegs", GetActorX(0), GetActorY(0), GetActorZ(0), legsTID);
	SpawnForced("FirstPersonLegsTarget", GetActorX(0), GetActorY(0), GetActorZ(0), legsTID + 1);
	
	Thing_SetTranslation(legsTID, -1);
	SetActivator(legsTID);
		
	LogDebug("Start legs");
	while (ActorIsAlive(sourceTid))
	{
		bool visible = GetVisible();
		
		// Check for chasecam. Do not show legs in chasecam.
		bool chasecamDontDraw = GetPlayerChasecam(ConsolePlayerNumber());
		
		// Do not show legs when the player's angle is beyond a certain threshold.
		// This is to avoid seeing them in mirrors (still shown in floor mirrors though)
		bool pitchDontDraw = GetActorPitch(sourceTid) < DRAWPITCHTHRESHOLD;
		
		// Check for chasecam. Do not show legs in chasecam.
		if (chasecamDontDraw || pitchDontDraw)
		{
			SetVisible(false);
			Delay(const: 1);
			continue;
		}
		
		if (!visible)
		{
			SetVisible(true);
		}
		
		fixed dirVectorX = -5.0,
			  dirVectorY = 0.0;
		
		// Check walking
		bool doWalk = GetActorXYVelocity(sourceTid) > 5.0;
		if (doWalk && !_walking)
		{
			SetWalking(true);
		}
		if (!doWalk && _walking)
		{
			SetWalking(false);
		}
		
		fixed offsetZ = 20.0;
		if (IsOpenGL())
		{
			// Opengl needs the legs slightly lower when walking to avoid it looking weird
			if (_walking)
			{
				dirVectorX -= 8.0;
			}
		}
		else
		{
			dirVectorX += 20.0;
			offsetZ -= 20.0;
		}
		
		RotateVector(dirVectorX, dirVectorY, GetActorAngle(sourceTid));
		dirVectorX = r1,
		dirVectorY = r2;
		
		// This should not fail as the actor used to place the legs does not check the blockmap.
		if (!SetActorPosition(legsTID + 1, GetActorX(sourceTid) + dirVectorX, GetActorY(sourceTid) + dirVectorY, GetActorZ(sourceTid) + offsetZ, false)) {
			//LogError("Failed to set leg position");
			Delay(const: 1);
			continue;
		}
		
		Warp(legsTID + 1, 0, 0, 0, 0, WARPF_NOCHECKPOSITION);	
		Delay(const: 1);
	}
	
	Thing_Remove(legsTID);
	Thing_Remove(legsTID + 1);
	LogDebug("End legs");
}

script "LegsDeath" death
{
	ACS_NamedExecute("LegsDisconnect", 0);
}

script "LegsDisconnect" (int id) disconnect
{
	if (!IsZandronum()) {
		terminate;
	}
	
	if (!_customTid == 0) {
		terminate;
	}
	
	SetLegsTid(-1);
	SetVisible(false);
	SetWalking(false);
	
	Thing_ChangeTID(_customTid, 0);
	LogDebug("Unset the player's TID");
}

script "LegsRespawn" respawn
{
	if (!IsZandronum()) {
		terminate;
	}
	
	LogDebug("Respawning player");
	ACS_NamedExecute("LegsEnter", 0);
}

script "LegsRespawnClient" respawn clientside
{
	if (!IsZandronum()) {
		terminate;
	}
	
	LogDebug("Respawning player client");
	ACS_NamedExecute("LegsEnterClient", 0);
}