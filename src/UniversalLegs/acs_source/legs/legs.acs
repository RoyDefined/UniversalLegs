private enum : fixed
{
	DRAWPITCHTHRESHOLDSOFTWARE = 0.10,
	DRAWPITCHTHRESHOLDOPENGL = 0.15,
};

private bool _walking;
private int _legsTid;
private bool _visible;
private bool _customTid;
private fixed _initialViewHeight;

function bool GetWalking(void)
{
	return _walking;
}

function void SetWalking(bool walking)
{
	SetActorState(GetLegsTid(), walking ? "Walking" : "Spawn");
	_walking = walking;
}

function int GetLegsTid(void)
{
	return _legsTid;
}

function void SetLegsTid(int tid)
{
	_legsTid = tid;
}

function bool GetVisible(void)
{
	return _visible;
}

function void SetVisible(bool visible)
{
	SetActorProperty(GetLegsTid(), APROP_ALPHA, visible ? 1.0 : 0.0);
	_visible = visible;
}

function fixed GetInitialViewHeight(void)
{
	return _initialViewHeight;
}

function void SetInitialViewHeight(fixed initialViewHeight)
{
	if (_initialViewHeight > initialViewHeight) {
		return;
	}
	
	_initialViewHeight = initialViewHeight;
}

script "LegsEnter" enter
{
	if (!IsZandronum()) {
		terminate;
	}
	
	// Intentional delay to avoid tid issues.
	Delay(const: 5);
	
	if (ActivatorTID() != 0) {
		terminate;
	}
	
	_customTid = UniqueTID();
	Thing_ChangeTID(0, _customTid);
	
	LogDebug("Tid has been assigned.");
}

script "LegsEnterClient" enter clientside
{
	if (!IsZandronum())
	{
		LogError("First person legs is a mod only compatible with Zandronum. Please change the source port you play on if you want to use this mod.");
		terminate;
	}
	
	if (PlayerIsBot(PlayerNumber())) {
		terminate;
	}
	
	// Intentional delay to avoid tid issues.
	Delay(const: 10);
	
	int legsTID = UniqueTid();
	SetLegsTid(legsTID);
	
	int sourceTid = ActivatorTID();
	
	SpawnForced("FirstPersonLegs", GetActorX(0), GetActorY(0), GetActorZ(0), legsTID);
	SpawnForced("FirstPersonLegsTarget", GetActorX(0), GetActorY(0), GetActorZ(0), legsTID + 1);
	
	Thing_SetTranslation(legsTID, -1);
	SetActivator(legsTID);
		
	LogDebug("Start legs");
	while (ActorIsAlive(sourceTid))
	{
		bool visible = GetVisible();
		
		// Check for chasecam. Do not show legs in chasecam.
		bool chasecamDontDraw = GetPlayerChasecam(ConsolePlayerNumber());
		
		// Do not show legs when the player's angle is beyond a certain threshold.
		// This is to avoid seeing them in mirrors (still shown in floor mirrors though).
		fixed pitchThreshold = IsOpenGL() ? DRAWPITCHTHRESHOLDOPENGL : DRAWPITCHTHRESHOLDSOFTWARE;
		bool pitchDontDraw = GetActorPitch(sourceTid) < pitchThreshold;
		
		// Check for chasecam. Do not show legs in chasecam.
		if (chasecamDontDraw || pitchDontDraw)
		{
			SetVisible(false);
			Delay(const: 1);
			continue;
		}
		
		if (!visible)
		{
			SetVisible(true);
		}
		
		fixed dirVectorX = -5.0,
			  dirVectorY = 0.0;
		
		// Check walking
		bool doWalk = GetActorXYVelocity(sourceTid) > 5.0;
		if (doWalk && !_walking)
		{
			SetWalking(true);
		}
		if (!doWalk && _walking)
		{
			SetWalking(false);
		}
		
		// Set initial viewheight. Will override if the value is greater than the old value.
		// This is used to detect crouching. Since there is no good way to do this, we use this instead.
		// The reason the whole overriding is done is because a player could crouch before the code kicks in,
		// and this means the code will be wrong because the initial viewheight will actually be the crouched viewheight.
		SetInitialViewHeight(GetActorViewHeight(sourceTid));
		
		// TODO: Make this offset configurable. This whole thing exists because the leg sprites are cut off.
		fixed offsetZ = 20.0;
		if (IsOpenGL())
		{
			// Opengl needs the legs slightly lower when walking to avoid it looking weird
			if (_walking)
			{
				dirVectorX -= 8.0;
			}
			
			// Lower the Z value by a specific value if the player is crouching.
			fixed diffOpenGL = (GetInitialViewHeight() - GetActorViewHeight(sourceTid)) / 2;
			offsetZ -= diffOpenGL;
		}
		else
		{
			dirVectorX += 20.0;
			offsetZ -= 10.0;
			
			// In software mode instead move the legs back because they will get stuck otherwise.
			// The legs won't actually be viewable, but that seems pretty fair considering the weird angle.
			fixed diffSoftware = (GetInitialViewHeight() - GetActorViewHeight(sourceTid));
			dirVectorX -= diffSoftware;
			
			if (_walking)
			{
				dirVectorX -= 3.0;
			}
		}
		
		RotateVector(dirVectorX, dirVectorY, GetActorAngle(sourceTid));
		dirVectorX = r1,
		dirVectorY = r2;
		
		// The warping appears to apply extra Z velocity regardless of the flags added to the warping.
		// To avoid the legs floating away when a lot of velocity is applied, we instead decrement this from the final position.
		fixed velZ = GetActorVelZ(sourceTid);
		
		fixed targetX = GetActorX(sourceTid) + dirVectorX,
			  targetY = GetActorY(sourceTid) + dirVectorY,
			  targetZ = GetActorZ(sourceTid) + offsetZ - velZ;
			  
		// This should not fail as the actor used to place the legs does not check the blockmap.
		if (!SetActorPosition(legsTID + 1, targetX, targetY, targetZ, false)) {
			//LogError("Failed to set leg position");
			Delay(const: 1);
			continue;
		}
		
		Warp(legsTID + 1, 0, 0, 0, 0, WARPF_NOCHECKPOSITION);	
		Delay(const: 1);
	}
	
	Thing_Remove(legsTID);
	Thing_Remove(legsTID + 1);
	LogDebug("End legs");
}

script "LegsDeath" death
{
	ACS_NamedExecute("LegsDisconnect", 0);
}

script "LegsDisconnect" (int id) disconnect
{
	if (!IsZandronum()) {
		terminate;
	}
	
	if (!_customTid == 0) {
		terminate;
	}
	
	SetLegsTid(-1);
	SetVisible(false);
	SetWalking(false);
	
	Thing_ChangeTID(_customTid, 0);
	LogDebug("Unset the player's TID");
}

script "LegsRespawn" respawn
{
	if (!IsZandronum()) {
		terminate;
	}
	
	LogDebug("Respawning player");
	ACS_NamedExecute("LegsEnter", 0);
}

script "LegsRespawnClient" respawn clientside
{
	if (!IsZandronum()) {
		terminate;
	}
	
	LogDebug("Respawning player client");
	ACS_NamedExecute("LegsEnterClient", 0);
}